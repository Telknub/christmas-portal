/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Swapped = ContractEventLog<{
  farmId: string;
  matic: string;
  sfl: string;
  fee: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface BuySFL extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BuySFL;
  clone(): BuySFL;
  methods: {
    addGameRole(_game: string): NonPayableTransactionObject<void>;

    farm(): NonPayableTransactionObject<string>;

    feeWallet(): NonPayableTransactionObject<string>;

    gameAddGameRole(_game: string): NonPayableTransactionObject<void>;

    gameRemoveGameRole(_game: string): NonPayableTransactionObject<void>;

    gameRoles(arg0: string): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    removeGameRole(_game: string): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    routerAddress(): NonPayableTransactionObject<string>;

    swap(
      _signature: string | number[],
      _farmId: number | string | BN,
      _amountOutMin: number | string | BN,
      _deadline: number | string | BN,
      _feePercent: number | string | BN
    ): PayableTransactionObject<void>;

    swappedAt(arg0: number | string | BN): NonPayableTransactionObject<string>;

    tokenAddress(): NonPayableTransactionObject<string>;

    transferFeeWallet(_feeWallet: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    transferRouterAddress(
      _routerAddress: string
    ): NonPayableTransactionObject<void>;

    transferSigner(_signer: string): NonPayableTransactionObject<void>;

    transferTokenAddress(
      _tokenAddress: string
    ): NonPayableTransactionObject<void>;

    transferWethAddress(
      _wethAddress: string
    ): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;

    verify(
      hash: string | number[],
      signature: string | number[]
    ): NonPayableTransactionObject<boolean>;

    wethAddress(): NonPayableTransactionObject<string>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    Swapped(cb?: Callback<Swapped>): EventEmitter;
    Swapped(options?: EventOptions, cb?: Callback<Swapped>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "Swapped", cb: Callback<Swapped>): void;
  once(event: "Swapped", options: EventOptions, cb: Callback<Swapped>): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
