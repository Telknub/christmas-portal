/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface SunflowerLandAuction extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SunflowerLandAuction;
  clone(): SunflowerLandAuction;
  methods: {
    addCollectibleBatch(
      _recipes: {
        mintId: number | string | BN;
        maxSupply: number | string | BN;
        releaseDate: number | string | BN;
        enabled: boolean;
      }[]
    ): NonPayableTransactionObject<boolean[]>;

    addGameRole(_game: string): NonPayableTransactionObject<void>;

    addWearableBatch(
      _recipes: {
        mintId: number | string | BN;
        maxSupply: number | string | BN;
        releaseDate: number | string | BN;
        enabled: boolean;
      }[]
    ): NonPayableTransactionObject<boolean[]>;

    bumpkinWearables(): NonPayableTransactionObject<string>;

    deposit(): PayableTransactionObject<void>;

    destroy(): PayableTransactionObject<void>;

    executed(arg0: string | number[]): NonPayableTransactionObject<boolean>;

    farm(): NonPayableTransactionObject<string>;

    gameAddGameRole(_game: string): NonPayableTransactionObject<void>;

    gameRemoveGameRole(_game: string): NonPayableTransactionObject<void>;

    gameRoles(arg0: string): NonPayableTransactionObject<boolean>;

    getCollectible(id: number | string | BN): NonPayableTransactionObject<{
      mintId: string;
      maxSupply: string;
      releaseDate: string;
      enabled: boolean;
    }>;

    getCollectibleBatch(
      ids: (number | string | BN)[]
    ): NonPayableTransactionObject<
      {
        mintId: string;
        maxSupply: string;
        releaseDate: string;
        enabled: boolean;
      }[]
    >;

    getWearable(id: number | string | BN): NonPayableTransactionObject<{
      mintId: string;
      maxSupply: string;
      releaseDate: string;
      enabled: boolean;
    }>;

    getWearableBatch(
      ids: (number | string | BN)[]
    ): NonPayableTransactionObject<
      {
        mintId: string;
        maxSupply: string;
        releaseDate: string;
        enabled: boolean;
      }[]
    >;

    inventory(): NonPayableTransactionObject<string>;

    mintCollectible(
      signature: string | number[],
      sessionId: string | number[],
      nextSessionId: string | number[],
      deadline: number | string | BN,
      farmId: number | string | BN,
      mintFee: number | string | BN,
      id: number | string | BN,
      supply: number | string | BN
    ): PayableTransactionObject<boolean>;

    mintWearable(
      signature: string | number[],
      sessionId: string | number[],
      nextSessionId: string | number[],
      deadline: number | string | BN,
      farmId: number | string | BN,
      id: number | string | BN,
      supply: number | string | BN,
      mintFee: number | string | BN
    ): PayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    removeCollectibleBatch(
      ids: (number | string | BN)[]
    ): NonPayableTransactionObject<boolean[]>;

    removeGameRole(_game: string): NonPayableTransactionObject<void>;

    removeWearableBatch(
      ids: (number | string | BN)[]
    ): NonPayableTransactionObject<boolean[]>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    session(): NonPayableTransactionObject<string>;

    transferMintFeeWallet(_team: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    transferSigner(_signer: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
